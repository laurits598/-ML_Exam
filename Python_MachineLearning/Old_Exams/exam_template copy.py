from inspect import CO_VARARGS
import toolbox_extended as te
import toolbox_02450 as tb
import numpy as np
import pandas as pd
from exam_toolbox import *
import re
import os
from math import exp
from scipy.integrate import quad


class exam:

    # ----------------------------------------------- OPG 1-----------------------------------------------
    def opg1():
        # Boxplot 1 must be x1
        
        # Boxplot 3 must be x5
        
        # Boxplot 2 must be x8
        # Boxplot 4 must x3
        return "B"

    # ----------------------------------------------- OPG 2-----------------------------------------------
    def opg2():
        gm_obj = gmm()
        
        mu = [[50],[50]]
        #We blot x1/x2 covariance matrix for the options
        a = [[564.3, -77.5], [-77.5, 271.5]]
        b = [[-564.3, -77.5], [-77.5, -72.5]]
        c = [[224.6, 248.1], [248.1, 392.4]]
        d = [[-224.6, 248.1], [248.1, -392.4]]
        
        gm_obj.plot_gmm(mu,a)
        gm_obj.plot_gmm(mu,b)
        gm_obj.plot_gmm(mu,c)
        gm_obj.plot_gmm(mu,d)
        # Looks like it's C, we check for x4/x5
        c_2 = [[369.9, -388.5], [-388.5,  564.3]]
        gm_obj.plot_gmm(mu,c_2)
        
        # So the answer must be C
        return "C"

    # ----------------------------------------------- OPG 3-----------------------------------------------
    def opg3():
        S = [43.4,23.39,18.26,9.34,2.14]
        pca_obj = pca_calc()
        pca_obj.draw_curve_from_diagonal_values(S)
        pca_obj.var_explained(S)
        # Variance explained by first 3 is 96.7%, so B is correct
        return "B"

    # ----------------------------------------------- OPG 4-----------------------------------------------
    def opg4():
        # From maple pca_proj, we see A must be correct since is have negative projection.
        return "A"

    # ----------------------------------------------- OPG 5-----------------------------------------------
    def opg5():
        # I think it's D, because it should be possible to draw a line to seperate the 2
        return "D"

    # ----------------------------------------------- OPG 6-----------------------------------------------
    def opg6():
        # data = [[0.0,   53.8,   87.0,   67.4,   67.5,   71.2,   65.2,   117.9,  56.1,   90.3,   109.8],
        #         [53.8,  0.0,    69.9,   75.5,   62.9,   58.0,   63.0,   135.0,  84.1,   107.9,  131.5],
        #         [87.0,  69.9,   0.0,    49.7,   38.5,   19.3,   35.5,   91.8,   76.9,   78.7,   89.1],
        #         [67.4,  75.5,   49.7,   0.0,    4.2,    47.2,   47.0,   62.3,   33.4,   37.2,   60.0],
        #         [67.5,  62.9,   38.5,   24.2,   0.0,    37.7,   41.7,   79.5,   52.4,   60.2,   78.9],
        #         [71.2,  58.0,   19.3,   47.2,   37.7,   0.0,    21.5,   95.6,   68.3,   78.4,   91.0],
        #         [65.2,  63.0,   35.5,   47.0,   41.7,   21.5,   0.0,    96.0,   64.3,   75.5,   89.4],
        #         [117.9, 135.0,  91.8,   62.3,   79.5,   95.6,   96.0,   0.0,    66.9,   44.3,   24.2],
        #         [56.1,  84.1,   76.9,   33.4,   52.4,   68.3,   64.3,   66.9,   0.0,    39.2,   60.7],
        #         [90.3,  107.9,  78.7,   37.2,   60.2,   78.4,   75.5,   44.3,   39.2,   0.0,    39.4],
        #         [109.8, 131.5,  89.1,   60.0,   78.9,   91.0,   89.4,   24.2,   60.7,   39.4,   0.0]]
        data = [[0.0,53.8,87.0,67.4,67.5,71.2,65.2,117.9,56.1,90.3,109.8],
                [53.8,0.0,69.9,75.5,62.9,58.0,63.0,135.0,84.1,107.9,131.5],
                [87.0,69.9,0.0,49.7,38.5,19.3,35.5,91.8,76.9,78.7,89.1],
                [67.4,75.5,49.7,0.0,24.2,47.2,47.0,62.3,33.4,37.2,60.0],
                [67.5,62.9,38.5,24.2,0.0,37.7,41.7,79.5,52.4,60.2,78.9],
                [71.2,58.0,19.3,47.2,37.7,0.0,21.5,95.6,68.3,78.4,91.0],
                [65.2,63.0,35.5,47.0,41.7,21.5,0.0,96.0,64.3,75.5,89.4],
                [117.9,135.0,91.8,62.3,79.5,95.6,96.0,0.0,66.9,44.3,24.2],
                [56.1,84.1,76.9,33.4,52.4,68.3,64.3,66.9,0.0,39.2,60.7],
                [90.3,107.9,78.7,37.2,60.2,78.4,75.5,44.3,39.2,0.0,39.4],
                [109.8,131.5,89.1,60.0,78.9,91.0,89.4,24.2,60.7,39.4,0.0]]
        df = pd.DataFrame(data)
        sup = supervised()
        black = [1,2]
        red = [3,4,5,6,7]
        blue = [8,9,10,11]
        
        predi = sup.knn_dist_pred_3d(df,red,black,blue,3)
        print (predi)
        sup.pred_stats(predi["True_label"],predi["Predicted_label"],show=True)
        # Maybe 2/3, not sure
        return "E"

    # ----------------------------------------------- OPG 7-----------------------------------------------
    def opg7():
        data = [[0.0,53.8,87.0,67.4,67.5,71.2,65.2,117.9,56.1,90.3,109.8],
                [53.8,0.0,69.9,75.5,62.9,58.0,63.0,135.0,84.1,107.9,131.5],
                [87.0,69.9,0.0,49.7,38.5,19.3,35.5,91.8,76.9,78.7,89.1],
                [67.4,75.5,49.7,0.0,24.2,47.2,47.0,62.3,33.4,37.2,60.0],
                [67.5,62.9,38.5,24.2,0.0,37.7,41.7,79.5,52.4,60.2,78.9],
                [71.2,58.0,19.3,47.2,37.7,0.0,21.5,95.6,68.3,78.4,91.0],
                [65.2,63.0,35.5,47.0,41.7,21.5,0.0,96.0,64.3,75.5,89.4],
                [117.9,135.0,91.8,62.3,79.5,95.6,96.0,0.0,66.9,44.3,24.2],
                [56.1,84.1,76.9,33.4,52.4,68.3,64.3,66.9,0.0,39.2,60.7],
                [90.3,107.9,78.7,37.2,60.2,78.4,75.5,44.3,39.2,0.0,39.4],
                [109.8,131.5,89.1,60.0,78.9,91.0,89.4,24.2,60.7,39.4,0.0]]
        df = pd.DataFrame(data)
        
        clu = cluster()
        
        clu.dendro_plot(df,"complete")
        # we see it must be Dendrogram 3, answer C
        return "C"

    # ----------------------------------------------- OPG 8-----------------------------------------------
    def opg8():
        data = [[0.0,53.8,87.0,67.4,67.5,71.2,65.2,117.9,56.1,90.3,109.8],
                [53.8,0.0,69.9,75.5,62.9,58.0,63.0,135.0,84.1,107.9,131.5],
                [87.0,69.9,0.0,49.7,38.5,19.3,35.5,91.8,76.9,78.7,89.1],
                [67.4,75.5,49.7,0.0,24.2,47.2,47.0,62.3,33.4,37.2,60.0],
                [67.5,62.9,38.5,24.2,0.0,37.7,41.7,79.5,52.4,60.2,78.9],
                [71.2,58.0,19.3,47.2,37.7,0.0,21.5,95.6,68.3,78.4,91.0],
                [65.2,63.0,35.5,47.0,41.7,21.5,0.0,96.0,64.3,75.5,89.4],
                [117.9,135.0,91.8,62.3,79.5,95.6,96.0,0.0,66.9,44.3,24.2],
                [56.1,84.1,76.9,33.4,52.4,68.3,64.3,66.9,0.0,39.2,60.7],
                [90.3,107.9,78.7,37.2,60.2,78.4,75.5,44.3,39.2,0.0,39.4],
                [109.8,131.5,89.1,60.0,78.9,91.0,89.4,24.2,60.7,39.4,0.0]]
        df = pd.DataFrame(data)
        anom = anomaly()
        anom.ARD(df,4,3)
        
        # NOT ARD: Density is 0.0298, so answer B
        return "B"

    # ----------------------------------------------- OPG 9-----------------------------------------------
    def opg9():
        data = [[0.0,53.8,87.0,67.4,67.5,71.2,65.2,117.9,56.1,90.3,109.8],
                [53.8,0.0,69.9,75.5,62.9,58.0,63.0,135.0,84.1,107.9,131.5],
                [87.0,69.9,0.0,49.7,38.5,19.3,35.5,91.8,76.9,78.7,89.1],
                [67.4,75.5,49.7,0.0,24.2,47.2,47.0,62.3,33.4,37.2,60.0],
                [67.5,62.9,38.5,24.2,0.0,37.7,41.7,79.5,52.4,60.2,78.9],
                [71.2,58.0,19.3,47.2,37.7,0.0,21.5,95.6,68.3,78.4,91.0],
                [65.2,63.0,35.5,47.0,41.7,21.5,0.0,96.0,64.3,75.5,89.4],
                [117.9,135.0,91.8,62.3,79.5,95.6,96.0,0.0,66.9,44.3,24.2],
                [56.1,84.1,76.9,33.4,52.4,68.3,64.3,66.9,0.0,39.2,60.7],
                [90.3,107.9,78.7,37.2,60.2,78.4,75.5,44.3,39.2,0.0,39.4],
                [109.8,131.5,89.1,60.0,78.9,91.0,89.4,24.2,60.7,39.4,0.0]]
        df = pd.DataFrame(data)
        density,log_density = tb.gausKernelDensity(data,20)
        print ("Density:")
        print (density)
        print ("Log_density:")
        print (log_density)
        
        data = [[0.0,53.8,87.0,67.4,67.5,71.2,65.2,117.9,56.1,90.3,109.8],
                [53.8,0.0,69.9,75.5,62.9,58.0,63.0,135.0,84.1,107.9,131.5],
                [87.0,69.9,0.0,49.7,38.5,19.3,35.5,91.8,76.9,78.7,89.1],
                [67.4,75.5,49.7,0.0,24.2,47.2,47.0,62.3,33.4,37.2,60.0],
                [67.5,62.9,38.5,24.2,0.0,37.7,41.7,79.5,52.4,60.2,78.9],
                [71.2,58.0,19.3,47.2,37.7,0.0,21.5,95.6,68.3,78.4,91.0],
                [65.2,63.0,35.5,47.0,41.7,21.5,0.0,96.0,64.3,75.5,89.4],
                [117.9,135.0,91.8,62.3,79.5,95.6,96.0,0.0,66.9,44.3,24.2],
                [56.1,84.1,76.9,33.4,52.4,68.3,64.3,66.9,0.0,39.2,60.7],
                [90.3,107.9,78.7,37.2,60.2,78.4,75.5,44.3,39.2,0.0,39.4],
                [109.8,131.5,89.1,60.0,78.9,91.0,89.4,24.2,60.7,39.4,0.0]]
        df = pd.DataFrame(data)
        anom = anomaly()
        anom.ARD(df,10,2)
        
        return "E"

    # ----------------------------------------------- OPG 10-----------------------------------------------
    def opg10():
        P_ba = 5/5 * (5/11)
        P_b = (5/5) * (5/11) + (1/2) * (2/11) + (1/4) * (4/11)
        print (P_ba/P_b) 
        # So the answer must be C
        return "C"

    # ----------------------------------------------- OPG 11-----------------------------------------------
    def opg11():
        data = [[0,0,0,1,0,0,0,1],
                [0,0,1,0,0,1,0,1],
                [0,0,1,0,0,1,0,1],
                [0,1,0,0,0,1,0,1],
                [0,0,0,0,0,1,0,1],
                [0,0,1,0,1,1,0,1],
                [0,0,1,0,0,1,0,1],
                [1,1,0,0,0,0,1,1],
                [0,1,0,0,0,0,0,1],
                [0,1,0,0,0,1,0,1],
                [1,1,0,0,0,0,0,0]]
        df = pd.DataFrame(data)
        sim = similarity()
        o1 = [0,0,0,1,0,0,0,1]
        o2 = [0,0,1,0,0,1,0,1]
        o3 = [0,0,1,0,0,1,0,1]
        o4 = [0,1,0,0,0,1,0,1]
        sim.measures(o2,o4)
        sim.measures(o1,o2)
        sim.measures(o3,o4)
        sim.measures(o2,o4)
        # We see cos(o1,o2) = 0.408248
        # Answer B
        return "B"

    # ----------------------------------------------- OPG 12-----------------------------------------------
    def opg12():
        dec = decision_trees()
        root = [2,5,4]
        # f2 = 0
        v1 = [2,4,0]
        # f2 = 1
        v2 = [0,1,4]
        dec.purity_gain(root,v1,v2,"gini")
        # purity gain is: 0.240 = 436/1815
        # Answer B
        return "B"

    # ----------------------------------------------- OPG 13-----------------------------------------------
    def opg13():
        data = [[0,0,0,1,0,0,0,1],
                [0,0,1,0,0,1,0,1],
                [0,0,1,0,0,1,0,1],
                [0,1,0,0,0,1,0,1],
                [0,0,0,0,0,1,0,1],
                [0,0,1,0,1,1,0,1],
                [0,0,1,0,0,1,0,1],
                [1,1,0,0,0,0,1,1],
                [0,1,0,0,0,0,0,1],
                [0,1,0,0,0,1,0,1],
                [1,1,0,0,0,0,0,0]]
        df = pd.DataFrame(data)
        
        it = itemset()
        it.confidence(df,[5,7],[2,4])
        # The confidence is: 0.14285714285714288 = 1/7
        # The answer is B.
        return "B"

    # ----------------------------------------------- OPG 14-----------------------------------------------
    def opg14():
        data = [[0,0,0,1,0,0,0,1],
                [0,0,1,0,0,1,0,1],
                [0,0,1,0,0,1,0,1],
                [0,1,0,0,0,1,0,1],
                [0,0,0,0,0,1,0,1],
                [0,0,1,0,1,1,0,1],
                [0,0,1,0,0,1,0,1],
                [1,1,0,0,0,0,1,1],
                [0,1,0,0,0,0,0,1],
                [0,1,0,0,0,1,0,1],
                [1,1,0,0,0,0,0,0]]
        df = pd.DataFrame(data)
        
   #     asc = association_mining()
   #     asc.apriori_rules(df,)
        it = itemset()
        it.itemsets(df,0.3)
        # We see at L3, it is {2,5,7} = {f3,f6,f8}
        # The answer is B
        return "B"

    # ----------------------------------------------- OPG 15-----------------------------------------------
    def opg15():
        # data = [[38.0,15.1,27.4,77.9,18.1,33.3,48.5,50.0],
        #         [26.8,12.8,52.0,77.0,22.5,68.1,66.0,75.0],
        #         [64.5,39.6,74.4,37.1,45.7,66.7,66.0,64.3],
        #         [63.2,45.7,29.1,41.4,49.1,56.9,59.2,50.0],
        #         [66.3,34.3,37.7,43.1,40.9,63.9,70.9,60.7],
        #         [56.7,34.7,72.2,47.3,38.4,61.1,62.1,55.4],
        #         [63.4,30.6,66.4,49.8,30.2,62.5,50.5,42.9],
        #         [87.1,85.3,19.3,19.2,68.6,34.7,64.1,33.9],
        #         [51.3,46.8,14.8,53.4,49.3,37.5,52.4,35.7],
        #         [67.5,62.3,13.0,33.2,66.7,51.4,41.7,39.3],
        #         [86.0,71.3,25.1,20.5,71.9,25.0,48.5,32.1]]
        # mean_x1 = 60
        # mean_x2 = 43.27
        
        # bin_data = [[0,0],
        #             [0,0],
        #             [1,0],
        #             [1,0]
                    
        #             ]
        # df = pd.DataFrame(bin_data)
        # sup = supervised()
        # labels = [0,0,1,1,1,1,1,2,2,2,2]
        
        # sup.naive_bayes(labels,df,[0,1],[32,14],0)
        
        # for x1: 
        x = 32
        weights = [2/11, 5/11, 4/11]
        means = [32.4, 62.82,291.9]
        standard_dev = [20,20,20]
        gm = gmm()
        gm.prob_gmm(x,weights,means,standard_dev)
        # for x2:
        x = 14
        weights = [2/11, 5/11, 4/11]
        means = [14,37,66.4]
        standard_dev = [20,20,20]
        gm = gmm()
        gm.prob_gmm(x,weights,means,standard_dev)
        
        numerator = 0.4326*0.5479*(5/11)
        denom = 0.00010141
        print (numerator/denom)
        return "E"

    # ----------------------------------------------- OPG 16-----------------------------------------------
    def opg16():
        # It must be D
        return "D"

    # ----------------------------------------------- OPG 17-----------------------------------------------
    def opg17():
        #ann_parameter.py = 909 parameters
        return "C"

    # ----------------------------------------------- OPG 18-----------------------------------------------
    def opg18():
        
        return "E"

    # ----------------------------------------------- OPG 19-----------------------------------------------
    def opg19():
        ada = adaboost()
        ada.adaboost([0,0,0,1],1)
        #1-0.166 = 5/6
        return "D"

    # ----------------------------------------------- OPG 20-----------------------------------------------
    def opg20():
        data = [0.4,1.7,3.7,4.6]
        clu = cluster()
        clu.kmeans_1d(data,3,init=[4.6,4.6,0.4,])
        # Answer is A
        return "A"

    # ----------------------------------------------- OPG 21-----------------------------------------------
    def opg21():

        return "E"

    # ----------------------------------------------- OPG 22-----------------------------------------------
    def opg22():

        return "E"

    # ----------------------------------------------- OPG 23-----------------------------------------------
    def opg23():

        return "E"

    # ----------------------------------------------- OPG 24-----------------------------------------------
    def opg24():

        return "E"

    # ----------------------------------------------- OPG 25-----------------------------------------------
    def opg25():

        return "E"

    # ----------------------------------------------- OPG 26-----------------------------------------------
    def opg26():
        # We can see it must a, b or c from cluster size
        gm = gmm()
        mu_2 = [[-5.8],[13.1]]
        covA = [[2.7, 1], [1, 1.4]]
        covB = [[2.1, -1.6], [-1.6, 2.4]]
        covC = covB
        gm.plot_gmm(mu_2,covA)
        gm.plot_gmm(mu_2,covB)
        # So it's B or C
        mu_1 = [[-0.5],[-4.6]]
        covB = [[1.7, -1.3], [-1.3, 2.1]]
        covC = [[2.7, 1.0], [1.0, 1.4]]
        gm.plot_gmm(mu_1,covB)
        gm.plot_gmm(mu_1,covC)
        # So it's B
        return "B"

    # ----------------------------------------------- OPG 27-----------------------------------------------
    def opg27():
        ens = ensemble()
        
        probabilities = [0,0.05,0.1,0.15,0.39,0.51,0.55,0.72,0.85]
        
        pred_A = [0,1,1,0,0,1,1,1,0]
        
        pred_B = [0,1,1,1,0,1,0,1,0]
        
        pred_C = [1,1,1,0,0,0,1,0,1]
        
        pred_D = [1,0,1,1,0,1,1,0,0]
        
        ens.plot_roc_pred(pred_A,probabilities)
        ens.plot_roc_pred(pred_B,probabilities)
        ens.plot_roc_pred(pred_C,probabilities)
        ens.plot_roc_pred(pred_D,probabilities)
        # So it must be C
        return "C"

    # -------------------------------- answers dataframe -------------------------------------------------
    def answers(show=True, csv=False, excel=False):
        ans = pd.DataFrame(
            columns=["Student number: s174852"]
        )  # columns = ["OPG", "svar"])

        ans.loc[0] = ""
        # ans.loc[1] = "Q01: {}".format(exam.opg1())
        # ans.loc[2] = "Q02: {}".format(exam.opg2())
        # ans.loc[3] = "Q03: {}".format(exam.opg3())
        # ans.loc[4] = "Q04: {}".format(exam.opg4())
        # ans.loc[5] = "Q05: {}".format(exam.opg5())
        # ans.loc[6] = "Q06: {}".format(exam.opg6())
        # ans.loc[7] = "Q07: {}".format(exam.opg7())
        # ans.loc[8] = "Q08: {}".format(exam.opg8())
        # ans.loc[9] = "Q09: {}".format(exam.opg9())
        # ans.loc[10] = "Q10: {}".format(exam.opg10())
        # ans.loc[11] = ""

        # ans.loc[12] = "Q11: {}".format(exam.opg11())
        # ans.loc[13] = "Q12: {}".format(exam.opg12())
        # ans.loc[14] = "Q13: {}".format(exam.opg13())
        # ans.loc[15] = "Q14: {}".format(exam.opg14())
        # ans.loc[16] = "Q15: {}".format(exam.opg15())
        # ans.loc[17] = "Q16: {}".format(exam.opg16())
        # ans.loc[18] = "Q17: {}".format(exam.opg17())
        # ans.loc[19] = "Q18: {}".format(exam.opg18())
        # ans.loc[20] = "Q19: {}".format(exam.opg19())
        # ans.loc[21] = "Q20: {}".format(exam.opg20())
        # ans.loc[22] = ""

        # ans.loc[23] = "Q21: {}".format(exam.opg21())
        # ans.loc[24] = "Q22: {}".format(exam.opg22())
        # ans.loc[25] = "Q23: {}".format(exam.opg23())
        # ans.loc[26] = "Q24: {}".format(exam.opg24())
        # ans.loc[27] = "Q25: {}".format(exam.opg25())
        # ans.loc[28] = "Q26: {}".format(exam.opg26())
        ans.loc[29] = "Q27: {}".format(exam.opg27())

        if excel:
            ans.to_excel(re.sub(".py", "_answers.xlsx", __file__), index=False)
        if csv:
            ans.to_csv(re.sub(".py", "_answers.csv", __file__), index=False)
        if show:
            print(ans)

        return ans


exam.answers()
